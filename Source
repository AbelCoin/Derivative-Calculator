import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Application {

	public static void main(String[] args) {

		String eqInput;

		// number of operators
		int numOfOp;
		int numOfOperands;

		ArrayList<String> equationList = new ArrayList<>();
		ArrayList<String> derivativeList = new ArrayList<>();
		ArrayList<String> arithOpList = new ArrayList<>();

		Scanner scanInput = new Scanner(System.in);

		System.out.println("Enter an equation: ");
		eqInput = scanInput.nextLine();
		scanInput.close();

		// Gets + and - from equation and puts them into array
		arithOpList = arithOpList(eqInput, arithOpList);

		numOfOp = arithOpList.size();

		// Splits the string into operand list
		equationList = equationParser(eqInput, numOfOp, equationList);

		numOfOperands = equationList.size();

		derivativeList = powerRuleSolver(equationList);
		stringParser(derivativeList, arithOpList);

		// Checker
//		for(String op : equationList) {
//			System.out.println(op);
//		}

	}

	// Gets + and - from equation and puts them into array
	public static ArrayList<String> arithOpList(String equation, ArrayList<String> arithOpList) {

		ArrayList<String> tempArithList = new ArrayList<>();

		Pattern p = Pattern.compile("\\+|\\-");
		Matcher m = p.matcher(equation);

		while (m.find()) {
			tempArithList.add(m.group());
		}

		return tempArithList;
	}

	// Splits the string into operand list
	public static ArrayList<String> equationParser(String eq, int numOfOp, ArrayList<String> equation) {
		ArrayList<String> tempOperandList = new ArrayList<>();
		String[] tempStaticOpList = new String[numOfOp];

		tempStaticOpList = eq.trim().split("\\+|\\-");

		for (int i = 0; i < tempStaticOpList.length; i++) {

			tempOperandList.add(tempStaticOpList[i]);

		}

		return tempOperandList;
	}

	public static ArrayList<String> powerRuleSolver(ArrayList<String> operands) {
		// This array will be manipulated and should eventually contain no constants other than zero
		ArrayList<String> tempOperands = new ArrayList<String>();

		// Getting rid of constants and adding
		for (int i = 0; i < operands.size(); i++) {

			if (operands.get(i).contains("x") || operands.get(i).contains("X")) {
				tempOperands.add(operands.get(i));
			} else if (!operands.get(i).contains("x") || !operands.get(i).contains("x")) {
				tempOperands.add("0");
			}

		}

//		//Checker
//		for (int j = 0; j < tempOperands.size(); j++) {
//			System.out.println(tempOperands.get(j));
//		}

		for (int j = 0; j < tempOperands.size(); j++) {

			// Gets operand and put it into a character Array
			char[] chars = tempOperands.get(j).toCharArray();
			
			//For temporary storage of only two integers
			ArrayList<String> tempIntegerList = new ArrayList<>();
			ArrayList<Integer> tempIntIndex = new ArrayList<>(); // 0: Coefficient start 1:Coefficient End 2: Exponent start 3:Exponent End
			
			char[] tempExprArray; // Will be used for obtaining the expression which will be changed into a string
			String exprInside; // This will be used to change the character array into a proper string
			
			int coefficient;
			int exponent;

			Pattern p = Pattern.compile("\\d+");
			Matcher m = p.matcher(tempOperands.get(j));

			while (m.find()) {
				tempIntegerList.add(m.group()); // adds the group as a string
				tempIntIndex.add(m.start()); // Gets starting index
				tempIntIndex.add(m.end());	// Gets ending index of word			
			}


//			// Checker
//			for (char poop : chars) {
//				System.out.println(poop);
//			}

			// If it reaches this point, then there is more than 1 value in the operand
			// other than x
			if ((chars.length > 1) && chars[0] != '0') {

				// Runs only if there is no value after x.
				// This means that the derivative of the value will be a constant.
				// Subtracts x
				// Example input 2x will be replaced with 2
				// x^2 will not run here because the last element is not x
				if (chars[chars.length - 1] == 'x' || chars[chars.length - 1] == 'X') {

					// valuesOf() method converts character value to string
					tempOperands.set(j, String.valueOf(chars[0]));
				}

				// Runs only if x is the first value regardless of what comes after x
				// Example: x^2
				if (chars[0] == 'x' || chars[0] == 'X' || chars[0] == '(') {
					tempOperands.set(j, "1" + tempOperands.get(j));
					coefficient = 1;
					
					tempIntegerList.add(1, tempIntegerList.get(0));
					tempIntegerList.add(0, "1");

					// Updating List
					String tempCoPlusString = tempOperands.get(j);
					chars = tempCoPlusString.toCharArray();
					
				}
				
				

				if ((chars.length > 2) && (tempIntegerList.size()> 1)) {
					
					
					/////// Derivative Parser for Operands with beginning and ending Integers///////

					// ArrayList<Integer> tempMultiply = new ArrayList<Integer>();
					coefficient = Integer.parseInt(String.valueOf(tempIntegerList.get(0)));
					exponent = Integer.parseInt(String.valueOf(tempIntegerList.get(1)));
					// Integer checker
					//System.out.println("Coefficient: " + coefficient + " Exp: " +exponent);

					coefficient = coefficient * exponent;
					exponent = exponent - 1;

					
					if (exponent == 0) {

						tempOperands.set(j, String.valueOf(coefficient)); // Strings should be altered. For example 2x^1
																			// should turn into 2

					}else if(exponent == 1) {
						
						// Turns what's in between what's in the coefficient and the the exponent into a string
						
						
						if(tempIntIndex.size() > 2) {
							tempExprArray = Arrays.copyOfRange(chars, tempIntIndex.get(1), tempIntIndex.get(2) - 1);
							exprInside = new String(tempExprArray);

							tempOperands.set(j, (String.valueOf(coefficient) + exprInside)); // Strings should be altered. For example 2x^2 should turn
																	// into 4x
						}
						
						if(tempIntIndex.size() == 2) {
							
							tempExprArray = Arrays.copyOfRange(chars, 1, tempIntIndex.get(0));
							exprInside = new String(tempExprArray);
							tempOperands.set(j, (String.valueOf(coefficient) + exprInside)); 
						}
						
						
					}else if ((exponent > 1 || exponent < -1) && tempIntIndex.size() > 2) { // Works if x is in the beginning and exponent is larger
						
						// Turns what's in between what's in the coefficient and the the exponent into a string
						tempExprArray = Arrays.copyOfRange(chars, tempIntIndex.get(1), tempIntIndex.get(2));
						exprInside = new String(tempExprArray);

						tempOperands.set(j, (String.valueOf(coefficient) + exprInside + String.valueOf(exponent))); // Strings should be altered. For example 2x^1 should turn
																// into 2x
					}else if ((exponent > 1) && tempIntIndex.size() == 2) { // Works if x is in the beginning 
						
						// Turns what's in between what's in the coefficient and the the exponent into a string
						tempExprArray = Arrays.copyOfRange(chars, 1, tempIntIndex.get(0) + 1);
						exprInside = new String(tempExprArray);
						

						tempOperands.set(j, (String.valueOf(coefficient) + exprInside + String.valueOf(exponent))); // Strings should be altered. For example 2x^1 should turn
																// into 2x
						
						//System.out.println(tempOperands.get(j));
						
					}

					//////////////////////////////////////////////////////////////////////////////////

				} else if (tempIntegerList.size() == 1) {
					
					tempOperands.set(j, String.valueOf(tempIntegerList.get(0)));
					
					
					
				}

			} else if (chars.length > 1 && chars[0] == '0') { // Takes care of input such as 0x or 0x^2
				tempOperands.set(j, "0");
			} else if (chars.length == 1 && (chars[0] == 'x' || chars[0] == 'X')) { // takes care of x by itself and
																					// sets derivative to 1
				tempOperands.set(j, "1");
			} else if (chars.length < 1) { // Invalid input?
				System.out.println("Enter a valid operand");
				System.exit(0);
			}

		} // end of for loop

		// checker
//		for (String str : tempOperands) {
//			System.out.println(str);
//		}

		return tempOperands;
		 
	}
	
	public static void stringParser(ArrayList<String> derivativeList, ArrayList<String> arithOpList) {
		
		String wholeDerivative = "";
		
//		for(String d: derivativeList) {
//			System.out.println(d);
//		}
		char[] lastExpr = derivativeList.get(derivativeList.size() - 1).toCharArray();
		
		
		for(int i = 0; i < arithOpList.size();i++) {
			
			char[] operand = derivativeList.get(i).toCharArray();
			char[] operand2 = derivativeList.get(i + 1).toCharArray();
			
			if(operand[0] != '0') {
				
				wholeDerivative = wholeDerivative + derivativeList.get(i);
			}
			
			
			if((operand[0] != '0') || operand2[0] != '0') {
				
				wholeDerivative = wholeDerivative + arithOpList.get(i);
				
			}
			
		}
		
		if(lastExpr[0] != '0'){
			
			wholeDerivative = wholeDerivative + derivativeList.get(derivativeList.size() - 1);
			
		}
		
		System.out.println(wholeDerivative);
		
		
	}

	
} // end of class
